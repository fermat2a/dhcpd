#
# douglas2a.local configuration file for ISC dhcpd for Debian
#
#

# The ddns-updates-style parameter controls whether or not the server will
# attempt to do a DNS update when a lease is confirmed. We default to the
# behavior of the version 2 packages ('none', since DHCP v2 didn't
# have support for DDNS.)
ddns-update-style none;

# option definitions common to all supported networks...
option domain-name "douglas2a.local";
option domain-name-servers 192.168.135.10, 192.168.135.13, 192.168.135.14;
option routers 192.168.135.1;
option broadcast-address 192.168.135.255;

default-lease-time 600;
max-lease-time 7200;

# If this DHCP server is the official DHCP server for the local
# network, the authoritative directive should be uncommented.
authoritative;

# Use this to send dhcp log messages to a different log file (you also
# have to hack syslog.conf to complete the redirection).
log-facility local7;

# No service will be given on this subnet, but declaring it helps the 
# DHCP server to understand the network topology.

#subnet 192.168.135.0 netmask 255.255.255.0 {
#}

# my local network
subnet 192.168.135.0 netmask 255.255.255.0 {
  pool {
    failover peer "dhcp.douglas2a.local";
    range 192.168.135.100 192.168.135.200;
  }
}

host ap1 {
  hardware ethernet 00:11:22:33:44:55;
  fixed-address 192.168.135.2;
}

host ap2 {
  hardware ethernet B0:4E:26:B0:75:D8;
  fixed-address 192.168.135.3;
}

host ap3 {
# cudy WR AC1200 (WR 1300), MAC on marker: B4:4B:D6:24:FE:44
  hardware ethernet B4:4B:D6:24:FE:45;
  fixed-address 192.168.135.4;
}

host ap4 {
# cudy WR AC1200 (WR 1300), MAC on marker: B4:4B:D6:24:FD:98
  hardware ethernet B4:4B:D6:24:FD:98;
  fixed-address 192.168.135.5;
}

host drecksserver {
  hardware ethernet 3c:a8:2a:9f:42:28;
  fixed-address 192.168.135.10;
}

host drecksserver-ilo {
  hardware ethernet 3c:a8:2a:9f:42:2a;
  fixed-address 192.168.135.11;
}

host switch1 {
  hardware ethernet ff:ff:ff:ff:ff:ff;
  fixed-address 192.168.135.12;
}

host dhcp1 {
  hardware ethernet b8:27:eb:35:0b:57;
  fixed-address 192.168.135.13;
}

host dhcp2 {
  hardware ethernet b8:27:eb:b2:64:8f;
  fixed-address 192.168.135.14;
}

host hp8720 {
  hardware ethernet 48:ba:4e:87:a2:7c;
  fixed-address 192.168.135.20;
}

host scanner {
  hardware ethernet 30:f7:72:35:2c:e5;
  fixed-address 192.168.135.21;
}

host onkyo {
  hardware ethernet 00:09:b0:f0:56:6a;
  fixed-address 192.168.135.22;
}

host onkyo-wlan {
  hardware ethernet 00:09:b0:71:67:07;
  fixed-address 192.168.135.23;
}

host audio-terasse {
  hardware ethernet b8:27:eb:21:f4:49;
  fixed-address 192.168.135.40;
}

host audio-buero {
  hardware ethernet b8:27:eb:e7:31:da;
  fixed-address 192.168.135.41;
}

host media-wohnzimmer {
  hardware ethernet e4:5f:01:46:f5:45;
  fixed-address 192.168.135.42;
}

host fermatbookLan {
  hardware ethernet bc:ae:c5:d4:59:64;
  fixed-address 192.168.135.52;
}

host fermatbookWLan {
  hardware ethernet 88:53:2e:13:0e:7a;
  fixed-address 192.168.135.53;
}

host omenLan {
  hardware ethernet 80:ce:62:48:55:6f;
  fixed-address 192.168.135.54;
}

host omenWLan {
  hardware ethernet 00:21:6b:e4:33:ec;
  fixed-address 192.168.135.55;
}

host fujitsuDock {
  hardware ethernet 00:50:b6:23:24:82;
  fixed-address 192.168.135.56;
}

host fireTVWZ {
  hardware ethernet 60:6d:3c:0a:a5:b1;
  fixed-address 192.168.135.57;
}

host ps4 {
  hardware ethernet bc:60:a7:4d:1d:af;
  fixed-address 192.168.135.58;
}

host handyBea {
  hardware ethernet 88:79:7e:ef:52:62;
  fixed-address 192.168.135.59;
}

host retropi {
  hardware ethernet b8:27:eb:fa:b2:86;
  fixed-address 192.168.135.60;
}

host lubuntu {
  hardware ethernet 52:54:00:3d:0b:44;
  fixed-address 192.168.135.64;
}

# This is a very basic subnet declaration.

#subnet 10.254.239.0 netmask 255.255.255.224 {
#  range 10.254.239.10 10.254.239.20;
#  option routers rtr-239-0-1.example.org, rtr-239-0-2.example.org;
#}

# This declaration allows BOOTP clients to get dynamic addresses,
# which we don't really recommend.

#subnet 10.254.239.32 netmask 255.255.255.224 {
#  range dynamic-bootp 10.254.239.40 10.254.239.60;
#  option broadcast-address 10.254.239.31;
#  option routers rtr-239-32-1.example.org;
#}

# A slightly different configuration for an internal subnet.
#subnet 10.5.5.0 netmask 255.255.255.224 {
#  range 10.5.5.26 10.5.5.30;
#  option domain-name-servers ns1.internal.example.org;
#  option domain-name "internal.example.org";
#  option routers 10.5.5.1;
#  option broadcast-address 10.5.5.31;
#  default-lease-time 600;
#  max-lease-time 7200;
#}

# Hosts which require special configuration options can be listed in
# host statements.   If no address is specified, the address will be
# allocated dynamically (if possible), but the host-specific information
# will still come from the host declaration.

#host passacaglia {
#  hardware ethernet 0:0:c0:5d:bd:95;
#  filename "vmunix.passacaglia";
#  server-name "toccata.fugue.com";
#}

# Fixed IP addresses can also be specified for hosts.   These addresses
# should not also be listed as being available for dynamic assignment.
# Hosts for which fixed IP addresses have been specified can boot using
# BOOTP or DHCP.   Hosts for which no fixed address is specified can only
# be booted with DHCP, unless there is an address range on the subnet
# to which a BOOTP client is connected which has the dynamic-bootp flag
# set.
#host fantasia {
#  hardware ethernet 08:00:07:26:c0:a5;
#  fixed-address fantasia.fugue.com;
#}

# You can declare a class of clients and then do address allocation
# based on that.   The example below shows a case where all clients
# in a certain class get addresses on the 10.17.224/24 subnet, and all
# other clients get addresses on the 10.0.29/24 subnet.

#class "foo" {
#  match if substring (option vendor-class-identifier, 0, 4) = "SUNW";
#}

#shared-network 224-29 {
#  subnet 10.17.224.0 netmask 255.255.255.0 {
#    option routers rtr-224.example.org;
#  }
#  subnet 10.0.29.0 netmask 255.255.255.0 {
#    option routers rtr-29.example.org;
#  }
#  pool {
#    allow members of "foo";
#    range 10.17.224.10 10.17.224.250;
#  }
#  pool {
#    deny members of "foo";
#    range 10.0.29.10 10.0.29.230;
#  }
#}
